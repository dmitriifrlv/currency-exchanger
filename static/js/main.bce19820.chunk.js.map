{"version":3,"sources":["Components/CurrencyRow/CurrencyRow.js","App.js","index.js"],"names":["currencyRow","props","currencies","selectedCurrency","onChangeCurrency","amount","onChangeAmount","type","value","onChange","map","option","App","toAmount","fromAmount","useState","setCurrencies","fromCurrency","setFromCurrency","toCurrency","setToCurrency","setAmount","amountOfOriginalCurrency","setAmountOfOriginalCurrency","exchangeRate","setExchangeRate","text","setText","handleFromAmountChange","e","target","useEffect","fetch","then","response","json","data","firstCurrency","Object","keys","rates","console","log","base","res","Number","parseFloat","toPrecision","money","className","id","onClick","Date","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAEe,SAASA,EAAYC,GAAQ,IAChCC,EAA2ED,EAA3EC,WAAYC,EAA+DF,EAA/DE,iBAAkBC,EAA6CH,EAA7CG,iBAAkBC,EAA2BJ,EAA3BI,OAAQC,EAAmBL,EAAnBK,eAChE,OACI,gCACE,uBACAC,KAAK,SACLC,MAAQH,EACRI,SAAUH,IACV,wBACAE,MAAOL,EACPM,SAAUL,EAFV,SAGKF,EAAWQ,KAAI,SAAAC,GAAM,OAClB,wBAAqBH,MAAOG,EAA5B,SAAqCA,GAAxBA,WCuGhBC,MAjHf,WAAgB,IAUVC,EAAUC,EAVD,EACuBC,mBAAS,IADhC,mBACNb,EADM,KACMc,EADN,OAE2BD,mBAAS,MAFpC,mBAENE,EAFM,KAEQC,EAFR,OAGuBH,mBAAS,MAHhC,mBAGNI,EAHM,KAGMC,EAHN,OAIeL,mBAAS,GAJxB,mBAINV,EAJM,KAIEgB,EAJF,OAKmDN,oBAAS,GAL5D,mBAKNO,EALM,KAKoBC,EALpB,OAM2BR,qBAN3B,mBAMNS,EANM,KAMQC,EANR,OAOWV,mBAAS,IAPpB,mBAONW,EAPM,KAOAC,EAPA,KAwCf,SAASC,EAAuBC,GAC9BR,EAAUQ,EAAEC,OAAOtB,OACnBe,GAA4B,GA/BtBD,GACFR,EAAaT,EACbQ,EAAWR,EAASmB,IAEpBX,EAAWR,EACXS,EAAaT,EAASmB,GAG1BO,qBAAU,WACRC,MAAO,0CACNC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GACJ,IAAMC,EAAgBC,OAAOC,KAAKH,EAAKI,OAAO,GAC9CC,QAAQC,IAAIN,GACZpB,EAAc,CAACoB,EAAKO,MAAP,mBAAgBL,OAAOC,KAAKH,EAAKI,UAC9CtB,EAAgBkB,EAAKO,MACrBvB,EAAciB,GACdZ,EAAgBW,EAAKI,MAAMH,SAE9B,IAEHN,qBAAU,WACJd,GAAgBE,GAClBa,MAAS,yCAAJ,gBAAqDf,EAArD,oBAA6EE,IACjFc,MAAK,SAAAW,GAAG,OAAEA,EAAIT,UACdF,MAAK,SAAAG,GAAI,OAAEX,EAAgBoB,OAAOC,WAAYV,EAAKI,MAAMrB,IAAc4B,YAAY,SAErF,CAAC9B,EAAcE,IAYlB,IAAI6B,EAAQH,OAAOC,WAAWjC,GAAUkC,YAAY,GAKlD,OACE,sBAAKE,UAAU,OAAf,UACE,oDACE,sBAAKA,UAAU,MAAf,UACA,mBAAGA,UAAU,QAAb,qBACA,cAAC,EAAD,CACA/C,WAAYA,EACZC,iBAAkBc,EAClBb,iBAAkB,SAAAyB,GAAC,OAAIX,EAAgBW,EAAEC,OAAOtB,QAChDH,OAAQS,EACRR,eAAkBsB,EAClBqB,UAAU,mBAUV,sBAAKA,UAAU,MAAf,UACE,mCACF,cAAC,EAAD,CACA/C,WAAYA,EACZC,iBAAkBgB,EAClBf,iBAAkB,SAAAyB,GAAC,OAAIX,EAAgBW,EAAEC,OAAOtB,QAChDH,OAAQQ,EACRP,eAAkBsB,OAElB,qBAAKqB,UAAU,YAGf,sBAAKA,UAAU,MAAf,UACA,mBAAGC,GAAG,OAAN,4BAGC,8BACC,uBACE3C,KAAK,SACL2C,GAAG,gBACH1C,MAAOgB,SAKb,wBACAjB,KAAK,SACL4C,QAnDiB,WACrBxB,EAAQ,QAAD,OAASb,GAAT,OAAsBG,EAAtB,yBAAmD+B,GAAnD,OAA2D7B,EAA3D,kBAA+EiC,UAgDlF,sBAKA,mBAAGF,GAAG,OAAN,SACCxB,QC3GP2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bce19820.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function currencyRow(props) {\n    const { currencies, selectedCurrency, onChangeCurrency, amount, onChangeAmount } = props;\n    return (\n        <div>\n          <input \n          type=\"number\" \n          value ={amount}\n          onChange={onChangeAmount}/>\n          <select \n          value={selectedCurrency}\n          onChange={onChangeCurrency}>\n              {currencies.map(option => (\n                  <option key={option} value={option}>{option}</option>\n              ))}   \n          </select>\n        </div>\n    )\n}\n","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport CurrencyRow from './Components/CurrencyRow/CurrencyRow'\n\nfunction App() {\n  const [currencies, setCurrencies] = useState([]);\n  const [fromCurrency, setFromCurrency] = useState(null);\n  const [toCurrency, setToCurrency] = useState(null);\n  const [amount, setAmount] = useState(1)\n  const [amountOfOriginalCurrency, setAmountOfOriginalCurrency] = useState(true);\n  const [exchangeRate, setExchangeRate] = useState()\n  const [text, setText] = useState('');\n \n\n  let toAmount, fromAmount\n    if (amountOfOriginalCurrency) {\n      fromAmount = amount\n      toAmount = amount * exchangeRate\n    } else {\n      toAmount = amount;\n      fromAmount = amount / exchangeRate;\n    }\n\n  useEffect(()=>{\n    fetch ('https://api.exchangeratesapi.io/latest')\n    .then(response=>response.json())\n    .then(data=>{\n      const firstCurrency = Object.keys(data.rates)[0]\n      console.log(data)\n      setCurrencies([data.base, ...Object.keys(data.rates)])\n      setFromCurrency(data.base)\n      setToCurrency(firstCurrency)\n      setExchangeRate(data.rates[firstCurrency])\n    })\n}, [])\n\nuseEffect(() => {\n  if (fromCurrency && toCurrency) {\n    fetch(`${'https://api.exchangeratesapi.io/latest'}?base=${fromCurrency}&symbols=${toCurrency}`)\n    .then(res=>res.json())\n    .then(data=>setExchangeRate(Number.parseFloat((data.rates[toCurrency])).toPrecision(3)))\n  }\n}, [fromCurrency, toCurrency])\n\nfunction handleFromAmountChange(e) {\n  setAmount(e.target.value)\n  setAmountOfOriginalCurrency(true)\n} \n\nfunction handleToAmountChange(e) {\n  setAmount(e.target.value)\n  setAmountOfOriginalCurrency(false)\n} \n\nlet money = Number.parseFloat(toAmount).toPrecision(3)\n\nconst onButtonSubmit = () => {\n  setText(`Your ${fromAmount}${fromCurrency} is equall to ${money}${toCurrency} as of ${Date()}`)\n}\n  return (\n    <div className=\"Card\">\n      <h1>Currency Converter</h1>\n        <div className=\"row\">\n        <p className=\"label\">Convert</p>\n        <CurrencyRow \n        currencies={currencies}\n        selectedCurrency={fromCurrency}\n        onChangeCurrency={e => setFromCurrency(e.target.value)}\n        amount={fromAmount}\n        onChangeAmount = {handleFromAmountChange}\n        className=\"CurrencyRow\"/>\n        {/* to\n        <CurrencySelector \n        currencies={currencies}\n        selectedCurrency={toCurrency}\n        onChangeCurrency={e => setToCurrency(e.target.value)}\n        /> */}\n        </div>\n  \n        \n        <div className=\"row\">\n          <p>To</p>\n        <CurrencyRow \n        currencies={currencies}\n        selectedCurrency={toCurrency}\n        onChangeCurrency={e => setFromCurrency(e.target.value)}\n        amount={toAmount}\n        onChangeAmount = {handleFromAmountChange}/>\n        </div>\n        <div className=\"sec-row\">\n        </div>\n\n        <div className=\"row\">\n        <p id=\"exch\">\n          Exchange Rate:\n        </p>\n         <div>\n          <input \n            type=\"number\" \n            id=\"exchange-rate\"\n            value={exchangeRate}\n          ></input>\n         </div>\n        </div>\n\n      <button\n      type=\"submit\"\n      onClick={onButtonSubmit}\n      >Exchange</button>\n\n      <p id=\"text\">\n      {text}\n      </p>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}